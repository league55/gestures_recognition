{"version":3,"sources":["ml/geometry.js","mediapipe/script.js","components/video/Video.js","api/api.js","ml/process_v2.js","ml/ml_v2.js","components/MlControls.js","ml/csv.js","components/testingPanel/drawing.js","components/testingPanel/TestingPanel.js","App.js","reportWebVitals.js","index.js"],"names":["getDistance","a","b","distanceRaw","x","y","console","debug","distanceReal","z","normalizeCoordinates","pointsList","extrems","leftX","bottomY","rightX","topY","bordersInitial","forEach","point","Math","min","max","xAxisLength","yAxisLength","newXaxisLength","newYaxisLength","koefX","koefY","botLeft","map","p","fixed","fpsControl","FPS","noop","initHands","canvasElement","resultsCb","hands","Hands","locateFile","file","onResults","results","callback","canvasCtx","getContext","tick","save","clearRect","width","height","drawImage","image","multiHandLandmarks","multiHandedness","index","length","isRightHand","label","landmarks","drawConnectors","HAND_CONNECTIONS","color","drawLandmarks","fillColor","radius","lerp","from","restore","Video","props","state","counter","input_video","React","createRef","output_canvas","control_panel","nextProps","nextState","nextContext","this","current","data","setState","videoElement","Camera","onFrame","send","start","initCamera","controlsElement","ControlPanel","selfieMode","maxNumHands","minDetectionConfidence","minTrackingConfidence","add","StaticText","title","Toggle","field","Slider","range","step","on","options","classList","toggle","setOptions","initControlPanel","className","ref","Component","loadData","fetch","then","r","text","require","getDataLocal","line","features","slice","feature","prepareData","contents","push","tf","tfvis","classNames","model","dataPacks","trainXs","trainYs","testXs","testYs","metrics","container","name","tab","styles","fitCallbacks","show","fit","epochs","shuffle","validationData","squeeze","callbacks","history","log","doPrediction","predict","argMax","showAccuracy","preds","labels","perClassAccuracy","classAccuracy","showConfusion","confusionMatrix","render","values","tickLabels","trainedModel","dispose","input","trainModel","sequential","layers","flatten","inputShape","dense","activation","units","compile","loss","optimizer","train","adam","summary","getModel","dataCopy","entry","util","TRAIN_DATA_SIZE","round","test","tensor3d","tensor2d","prepareTrainDataPacks","evaluate","prediction","tensor","expandDims","MlControls","baseData","undefined","dynamicData","usePreloaded","handleTrain","bind","handlePreloadedChange","lastGesture","row","newEntry","Object","assign","allData","split","filter","lineStr","JSON","parse","e","concat","preparedData","handleModelChange","id","onClick","type","checked","onChange","addDataRow","draw","points","fillStyle","fillRect","TestingPanel","canvas_original","canvas_left_bot","canvas_norm","handleTest","App","lastGestureLabel","handleLabelChange","handleDataResults","handleSaveResults","target","value","testEntry","predictResult","labelsMapping","bestMatch","indexOf","raw","method","body","stringify","headers","disabled","handlePredict","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14fff7ab.chunk.js","sourcesContent":["export const getDistance = (a, b) => {\n  const distanceRaw = ((a.x - b.x) ** 2 + (a.y - b.y) ** 2) ** 0.5;\n  console.debug(\"distanceRaw\", distanceRaw);\n  const distanceReal = distanceRaw / ((a.z + b.z) / 2);\n  console.debug(\"distanceReal\", distanceReal);\n}\n\nexport const normalizeCoordinates = (pointsList = []) => {\n  const extrems = {leftX: 1, bottomY: 1, rightX: 0, topY: 0};\n  const bordersInitial = {leftX: 0, bottomY: 0, rightX: 1, topY: 1};\n\n  pointsList.forEach((point) => {\n    extrems.leftX = Math.min(extrems.leftX, point.x);\n    extrems.rightX = Math.max(extrems.rightX, point.x);\n    extrems.bottomY = Math.min(extrems.bottomY, point.y);\n    extrems.topY = Math.max(extrems.topY, point.y);\n  });\n\n  const xAxisLength = bordersInitial.rightX;\n  const yAxisLength = bordersInitial.topY;\n\n  const newXaxisLength = extrems.rightX - extrems.leftX;\n  const newYaxisLength = extrems.topY - extrems.bottomY;\n\n  const koefX = xAxisLength / newXaxisLength;\n  const koefY = yAxisLength / newYaxisLength;\n\n\n\n  const botLeft = pointsList.map(p => {\n    return  {x: p.x - extrems.leftX, y: p.y - extrems.bottomY};\n  });\n\n  const fixed = botLeft.map(p => {\n    return {x: p.x * koefX, y: p.y * koefY};\n  });\n  return [botLeft, fixed];\n}\n","// Our input frames will come from here.\nimport {drawConnectors, drawLandmarks, lerp} from '@mediapipe/drawing_utils/drawing_utils';\nimport {HAND_CONNECTIONS, Hands} from '@mediapipe/hands/hands';\nimport {Camera} from '@mediapipe/camera_utils/camera_utils';\nimport {ControlPanel, FPS, Slider, StaticText, Toggle} from '@mediapipe/control_utils/control_utils';\n\n// We'll add this to our control panel later, but we'll save it here so we can\n// call tick() each time the graph runs.\n// eslint-disable-next-line\nexport const fpsControl = new FPS();\n\nconst noop = () => {\n};\n\nfunction onResults(results, canvasElement, callback = noop) {\n  const canvasCtx = canvasElement.getContext('2d');\n  // Update the frame rate.\n  fpsControl.tick();\n\n  // Draw the overlays.\n  canvasCtx.save();\n  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  canvasCtx.drawImage(\n    results.image, 0, 0, canvasElement.width, canvasElement.height);\n  if (results.multiHandLandmarks && results.multiHandedness) {\n    for (let index = 0; index < results.multiHandLandmarks.length; index++) {\n      const classification = results.multiHandedness[index];\n      const isRightHand = classification.label === 'Right';\n      const landmarks = results.multiHandLandmarks[index];\n      // eslint-disable-next-line\n      drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {color: isRightHand ? '#00FF00' : '#FF0000'});\n      drawLandmarks(canvasCtx, landmarks, {\n        color: isRightHand ? '#00FF00' : '#FF0000',\n        fillColor: isRightHand ? '#FF0000' : '#00FF00',\n        radius: (x) => {\n          return lerp(x.from.z, -0.15, .1, 10, 1);\n        }\n      });\n    }\n  }\n  canvasCtx.restore();\n  callback(results);\n}\n\nexport function initHands(canvasElement, resultsCb) {\n  const hands = new Hands({\n    locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.1/${file}`;\n    }\n  });\n  hands.onResults((results) => onResults(results, canvasElement, resultsCb));\n  return hands;\n}\n\n/**\n * Instantiate a camera. We'll feed each frame we receive into the solution.\n */\nexport function initCamera(videoElement, hands) {\n  const camera = new Camera(videoElement, {\n    onFrame: async () => {\n      await hands.send({image: videoElement});\n    },\n    width: 480,\n    height: 360\n  });\n  camera.start();\n}\n\nexport function initControlPanel(controlsElement, videoElement, hands) {\n// Present a control panel through which the user can manipulate the solution\n// options.\n  new ControlPanel(controlsElement, {\n    selfieMode: true,\n    maxNumHands: 1,\n    minDetectionConfidence: 0.8,\n    minTrackingConfidence: 0.5\n  })\n    .add([\n      new StaticText({title: 'MediaPipe Hands'}),\n      fpsControl,\n      new Toggle({title: 'Selfie Mode', field: 'selfieMode'}),\n      new Slider(\n        {title: 'Max Number of Hands', field: 'maxNumHands', range: [1, 4], step: 1}),\n      new Slider({\n        title: 'Min Detection Confidence',\n        field: 'minDetectionConfidence',\n        range: [0, 1],\n        step: 0.01\n      }),\n      new Slider({\n        title: 'Min Tracking Confidence',\n        field: 'minTrackingConfidence',\n        range: [0, 1],\n        step: 0.01\n      }),\n    ])\n    .on(options => {\n      videoElement.classList.toggle('selfie', options.selfieMode);\n      hands.setOptions(options);\n    });\n}\n","import '@mediapipe/control_utils/control_utils.css'\nimport './Video.scss'\nimport React from 'react'\nimport {initCamera, initControlPanel, initHands} from \"../../mediapipe/script\";\n\nclass Video extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {counter: 0}\n    this.input_video = React.createRef();\n    this.output_canvas = React.createRef();\n    this.control_panel = React.createRef();\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false;\n  }\n\n  componentDidMount() {\n    const callbackWrapped = (data) => {\n      if (data.multiHandLandmarks && this.state.counter % 20 === 0) {\n        this.setState({counter: 0});\n        return this.props.callback(data.multiHandLandmarks);\n      }\n      this.setState({counter: this.state.counter + 1});\n    }\n    const hands = initHands(this.output_canvas.current, callbackWrapped);\n    initCamera(this.input_video.current, hands);\n    initControlPanel(this.control_panel.current, this.input_video.current, hands);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className={\"video-container\"}>\n            <video className={\"input_video\"} ref={this.input_video}/>\n            <canvas className={\"output_canvas\"} ref={this.output_canvas} width=\"480px\" height=\"360px\"/>\n          </div>\n          <div className=\"control-panel\" ref={this.control_panel}/>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n","export const appendLine = (raw) => {\n  fetch('http://localhost:3300/raw', {\n    method: \"POST\",\n    body: JSON.stringify(raw),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n    .then(r => r.text().then(r => console.log(r)));\n}\n\nexport const appendLines = (raws) => {\n  fetch('http://localhost:3300/raws', {\n    method: \"POST\",\n    body: JSON.stringify(raws),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n    .then(r => r.text().then(r => console.log(r)));\n}\n\nexport const loadData = async () => {\n  return fetch('http://localhost:3300/data').then(r => r.text());\n}\n","const {normalizeCoordinates} = require(\"./geometry\");\n\nfunction getDataLocal(line) {\n  const label = line[line.length - 1];\n  const features = normalizeCoordinates(line.slice(0, line.length - 1))[1];\n  return {label, features: features.map(feature => [feature.x, feature.y])};\n}\n\nexport const prepareSingleEntry = (lineStr) => {\n  return getDataLocal(lineStr);\n}\n\n\nexport const prepareData = (contents) => {\n  const data = [];\n\n  contents.forEach((line) => {\n      const {label, features} = getDataLocal(line);\n      data.push([features, label]);\n  });\n  return data;\n}\n","const tf = require('@tensorflow/tfjs');\nconst tfvis = require('@tensorflow/tfjs-vis');\n// Optional Load the binding:\n// Use '@tensorflow/tfjs-node-gpu' if running with GPU.\nconst classNames = ['palm', 'fist'];\n\nfunction getModel() {\n// Train a simple model:\n  // build neural network\n  const model = tf.sequential()\n\n  // Now we flatten the output from the 2D filters into a 1D vector to prepare\n  // it for input into our last layer. This is common practice when feeding\n  // higher dimensional data to a final classification output layer.\n  model.add(tf.layers.flatten({inputShape: [21, 2],}));\n\n  // Our last layer is a dense layer which has 10 output units, one for each\n  // output class (i.e. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9).\n  model.add(tf.layers.dense({\n    inputShape: [21],\n    activation: \"relu\",\n    units: 15,\n  }));\n  model.add(tf.layers.dense({\n    inputShape: [15],\n    activation: \"relu\",\n    units: 10,\n  }))\n  model.add(tf.layers.dense({\n    inputShape: [10],\n    activation: \"relu\",\n    units: 5,\n  }))\n  model.add(tf.layers.dense({\n    activation: \"softmax\",\n    units: 2,\n  }))\n  model.compile({\n    loss: \"sparseCategoricalCrossentropy\",\n    optimizer: tf.train.adam(),\n    metrics: ['accuracy']\n  })\n\n  model.summary();\n\n  // Choose an optimizer, loss function and accuracy metric,\n  // then compile and return the model\n  const optimizer = tf.train.adam();\n  model.compile({\n    optimizer: optimizer,\n    loss: 'categoricalCrossentropy',\n    metrics: ['accuracy'],\n  });\n  return model;\n}\n\nfunction prepareTrainDataPacks(data) {\n  const dataCopy = [];\n  data.forEach(entry => {\n    dataCopy.push([\n      entry[0],\n      [\n        entry[1] === \"palm\" ? 1 : 0,\n        entry[1] === \"fist\" ? 1 : 0\n      ]\n    ])\n  });\n  tf.util.shuffle(dataCopy);\n  console.log(dataCopy);\n\n\n  const TRAIN_DATA_SIZE = Math.round(data.length * 0.9);\n\n  const train = dataCopy.slice(0, TRAIN_DATA_SIZE);\n  const test = dataCopy.slice(TRAIN_DATA_SIZE, dataCopy.length);\n  const trainXs = tf.tensor3d(train.map(entry => entry[0]));\n  const trainYs = tf.tensor2d(train.map(entry => entry[1]));\n  const testXs = tf.tensor3d(test.map(entry => entry[0]));\n  const testYs = tf.tensor2d(test.map(entry => entry[1]));\n  return {trainXs, trainYs, testXs, testYs};\n}\n\nasync function train(model, dataPacks) {\n  const {trainXs, trainYs, testXs, testYs} = dataPacks;\n  const metrics = ['loss', 'val_loss', 'acc', 'val_acc'];\n  const container = {\n    name: 'Model Training', tab: 'Model', styles: { height: '1000px' }\n  };\n  const fitCallbacks = tfvis.show.fitCallbacks(container, metrics);\n\n  return model.fit(trainXs, trainYs, {\n    epochs: 35,\n    shuffle: true,\n    validationData: [testXs.squeeze(), testYs.squeeze()],\n    callbacks: fitCallbacks\n  }).then((history) => {\n    console.log(history)\n    return model;\n  });\n}\n\nfunction doPrediction(model, dataPacks) {\n  const {testXs, testYs} = dataPacks;\n  const preds = model.predict(testXs).argMax(-1);\n\n  return [preds, testYs];\n}\n\n\nasync function showAccuracy(model, dataPacks) {\n  const [preds, labels] = doPrediction(model, dataPacks);\n  const classAccuracy = await tfvis.metrics.perClassAccuracy(labels.argMax(-1), preds);\n  const container = {name: 'Accuracy', tab: 'Evaluation'};\n  tfvis.show.perClassAccuracy(container, classAccuracy, classNames);\n}\n\nasync function showConfusion(model, dataPacks) {\n  const [preds, labels] = doPrediction(model, dataPacks);\n  const confusionMatrix = await tfvis.metrics.confusionMatrix(labels.argMax(-1), preds);\n  const container = {name: 'Confusion Matrix', tab: 'Evaluation'};\n  tfvis.render.confusionMatrix(container, {values: confusionMatrix, tickLabels: classNames});\n\n}\n\nasync function evaluate(trainedModel, dataPacks) {\n  await showAccuracy(trainedModel, dataPacks);\n  await showConfusion(trainedModel, dataPacks);\n  return {trainedModel, dataPacks};\n}\n\nfunction dispose(input) {\n  const {trainedModel, dataPacks} = input;\n  const {trainXs, trainYs, testXs, testYs} = dataPacks;\n  trainXs.dispose();\n  trainYs.dispose();\n  testXs.dispose();\n  testYs.dispose();\n\n  return trainedModel;\n}\n\nexport const trainModel = function (data) {\n  const model = getModel(data.length);\n  const dataPacks = prepareTrainDataPacks(data);\n  return train(model, dataPacks)\n    .then((trainedModel) => evaluate(trainedModel, dataPacks))\n    .then(dispose);\n}\n\nexport const predict = async function (model, input) {\n  const tf = require('@tensorflow/tfjs');\n  const prediction = model.predict(tf.tensor(input).expandDims());\n  return prediction.data().then(data => {\n    return data;\n  });\n}\n","import React from 'react'\nimport {prepareData} from \"../ml/process_v2\";\nimport {trainModel} from \"../ml/ml_v2\";\nimport {loadData} from \"../api/api\";\nimport {asJSON} from \"../ml/csv\";\nimport \"./MLControls.scss\"\n\nclass MlControls extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {baseData: undefined, dynamicData: [], usePreloaded: true};\n    this.handleTrain = this.handleTrain.bind(this);\n    this.handlePreloadedChange = this.handlePreloadedChange.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return !!(nextProps.lastGesture && nextProps.model) || this.state.usePreloaded !== nextState.usePreloaded;\n  }\n\n  async componentDidMount() {\n    const baseData = await loadData();\n    this.setState({baseData: baseData});\n  }\n\n  addDataRow(row, label) {\n    let newEntry = [...row, label];\n    console.log(\"New entry\", newEntry);\n    this.state.dynamicData.push(newEntry);\n    console.log(\"dataset size is now: \" + this.state.dynamicData.length);\n    this.setState(Object.assign({}, this.state, {dynamicData: this.state.dynamicData}));\n  }\n\n  async handleTrain() {\n    const allData = this.state.usePreloaded ? asJSON(this.state.baseData).concat(this.state.dynamicData) : this.state.dynamicData;\n    const preparedData = prepareData(allData);\n    trainModel(preparedData)\n      .then(model => {\n        this.props.handleModelChange(model);\n      });\n  }\n\n  handlePreloadedChange(e) {\n    this.setState(Object.assign({}, this.state, {usePreloaded: !this.state.usePreloaded}));\n  }\n\n  render() {\n    return (\n      <div className={\"button-grp\"}>\n        <button id=\"trainBtn\" onClick={this.handleTrain}>Train</button>\n        <div>\n          <input type=\"checkbox\" id=\"usePreloaded\" checked={this.state.usePreloaded}\n                 onChange={this.handlePreloadedChange}/>Use preloadedData\n        </div>\n        <div>\n          <button id=\"addRowOk\" onClick={() => this.addDataRow(this.props.lastGesture, \"palm\")}>Add Palm entry</button>\n          <button id=\"addRowNone\" onClick={() => this.addDataRow(this.props.lastGesture, \"fist\")}>Add Fist\n            entry\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MlControls;\n","var fs = require('fs');\n\nexport const appendLines = (lines, filename = 'data.csv') => {\n  fs.appendFile(filename, lines, function (err) {\n    if (err) throw err;\n    console.log('Updated!');\n  });\n}\n\n\nexport const asJSON = (contents) => {\n  return contents.split(\"\\n\")\n    .filter(lineStr => lineStr.length)\n    .map((lineStr) => {\n      try {\n        return JSON.parse(\"[\" + lineStr + \"]\");\n      } catch (e) {\n        return undefined;\n      }\n    }).filter(a => !!a);\n}\n","import {drawConnectors, drawLandmarks} from \"@mediapipe/drawing_utils/drawing_utils\";\nimport {HAND_CONNECTIONS} from \"@mediapipe/hands/hands\";\n\nexport const draw = (canvasElement, points) => {\n  const canvasCtx = canvasElement.getContext('2d');\n  // Draw the overlays.\n  canvasCtx.save();\n  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  canvasCtx.fillStyle = \"blue\";\n  canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n  // canvasCtx.drawImage(\n  //   results.image, 0, 0, canvasElement.width, canvasElement.height);\n  const landmarks = points;\n  // eslint-disable-next-line\n  drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {color: '#00FF00'});\n  drawLandmarks(canvasCtx, landmarks, {\n    color: '#00FF00',\n    fillColor: '#FF0000',\n    radius: () => {\n      return 0.1;\n    }\n  });\n  canvasCtx.restore();\n}\n","import React from 'react'\nimport {draw} from \"./drawing\";\nimport {normalizeCoordinates} from \"../../ml/geometry\";\n\nclass TestingPanel extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.canvas_original = React.createRef();\n    this.canvas_left_bot = React.createRef();\n    this.canvas_norm = React.createRef();\n    this.handleTest = this.handleTest.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false;\n  }\n\n  async componentDidMount() {\n  }\n\n  async handleTest() {\n    const points = this.props.points;\n    if (points) {\n      draw(this.canvas_original.current, points);\n      const [botLeft, fixed] = normalizeCoordinates(points);\n      debugger;\n      draw(this.canvas_left_bot.current, botLeft);\n      draw(this.canvas_norm.current, fixed);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button id=\"test\" onClick={this.handleTest}>Test</button>\n        <div>\n          <canvas ref={this.canvas_original} width=\"480px\" height=\"360px\"/>\n        </div>\n        <div>\n          <canvas ref={this.canvas_left_bot} width=\"480px\" height=\"360px\"/>\n        </div>\n        <div>\n          <canvas ref={this.canvas_norm} width=\"480px\" height=\"360px\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TestingPanel;\n","import '@mediapipe/control_utils/control_utils.css'\nimport React from 'react'\nimport Video from \"./components/video/Video\";\nimport {appendLine} from \"./api/api\";\nimport MlControls from \"./components/MlControls\";\nimport {predict} from \"./ml/ml_v2\";\nimport {prepareSingleEntry} from \"./ml/process_v2\";\nimport TestingPanel from \"./components/testingPanel/TestingPanel\";\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {label: \"\", data: [], model: undefined, lastGestureLabel: undefined};\n    this.handleLabelChange = this.handleLabelChange.bind(this);\n    this.handleDataResults = this.handleDataResults.bind(this);\n    this.handleSaveResults = this.handleSaveResults.bind(this);\n    this.handleModelChange = this.handleModelChange.bind(this);\n  }\n\n\n  handleLabelChange(e) {\n    this.setState(Object.assign({}, this.state, {label: e.target.value}));\n  }\n\n  handleModelChange(model) {\n    this.setState(Object.assign({}, this.state, {model}));\n  }\n\n  async handleDataResults(results) {\n    let lastGestureLabel = this.state.lastGestureLabel;\n    if (this.state.model && results) {\n      let testEntry = prepareSingleEntry(results[0].concat(\"lable_unknown\"));\n      const predictResult = await predict(this.state.model, testEntry.features);\n      const labelsMapping = [\"Palm \", \"Fist \", \"Undefined \"];\n      let bestMatch = predictResult.indexOf(Math.max(...predictResult));\n\n      lastGestureLabel = predictResult[bestMatch] > 0.5 ? labelsMapping[bestMatch] + Math.round(predictResult[bestMatch] * 100) / 100 : \"Undefined \" + Math.round(predictResult[1] * 100) / 100;\n    }\n    this.setState(Object.assign({}, this.state, {data: results, lastGestureLabel: lastGestureLabel}));\n  }\n\n  handleSaveResults() {\n    console.log(this.state.data);\n    appendLine({data: this.state.data[0], label: this.state.label});\n  }\n\n  render() {\n    const lastGesture = this.state.data ? this.state.data[0] : \"\";\n    return (\n      <div className=\"container\">\n        <div>\n          <Video callback={this.handleDataResults}/>\n          <div className={\"data_panel\"}>\n            <span>lastGesture: {this.state.lastGestureLabel}</span>\n            <div>\n            </div>\n            <TestingPanel points={this.state.data && this.state.data[0]}/>\n          </div>\n          <div className={\"button-grp\"}>\n            <button id=\"saveBtn\" onClick={this.handleSaveResults} disabled>Persist data</button>\n          </div>\n\n          <MlControls handleModelChange={this.handleModelChange} lastGesture={lastGesture}\n                      model={this.state.model} handlePredict={this.handlePredict}/>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}